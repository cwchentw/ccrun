#!/bin/sh
# Run C or C++ code automatically.
# Author: Michelle Chen  License: MIT


program="$0";
version="0.1.0";
license="MIT";

unsupported_file_extension="unknown"
unsupported_file_type="empty"

version ()
{
    echo $version;
}

license ()
{
    echo $license;
}

#--------1---------2---------3---------4---------5---------6---------7---------8
#2345678901234567890123456789012345678901234567890123456789012345678901234567890
help_info ()
{
    printf "Usage: %s [command] ...\n" "$program";
    printf "       %s help [command]\n" "$program";
    printf "\n";
    printf "Commands:\n";
    printf "\tversion\t\tShow version info and exit\n";
    printf "\tlicense\t\tShow license info and exit\n";
    printf "\thelp\t\tShow help info and exit\n";
    printf "\trun\t\tCompile and run an application (default)\n";
    printf "\n";
    printf "Environment variables:\n";
    printf "\tOUT_FILE\t\tThe name of output file\n";
    printf "\tCC\t\t\tSet C compier, default to gcc\n";
    printf "\tCXX\t\t\tSet C++ Compiler, default to g++\n"
    printf "\tCFLAGS\t\t\tCustom include paths and compiler flags for C\n";
    printf "\tCXXFLAGS\t\tCusteom include paths and compiler flags for C++\n";
    printf "\tLDFLAGS\t\t\tCustom library paths\n";
    printf "\tLIBS\t\t\tCustom library linkage\n";
    printf "\tLD_LIBRARY_PATH\t\tCustom binary file paths\n";
}
#2345678901234567890123456789012345678901234567890123456789012345678901234567890
#--------1---------2---------3---------4---------5---------6---------7---------8

help_version ()
{
    echo "Usage: $program version";
    echo "";
    echo "Show version info and exit";
}

help_license ()
{
    echo "Usage: $program license";
    echo "";
    echo "Show license info and exit";
}

help_help ()
{
    echo "Usage: $program help [command]";
    echo "";
    echo "Show help info for [command] and exit";
}

help_run ()
{
    echo "Usage: $program [run] main.m ...";
    echo "";
    echo "Run a C or C++ program";
}

# check_ext extension
check_ext ()
{
    local ext=$1;

    if [ -z "$ext" ];
    then
        echo "No valid extenstion" >&2;
        exit 1;
    fi

    case $ext in
    *.cpp)
        echo ".cpp"
        ;;
    *.cxx)
        echo ".cxx"
        ;;
    *.cc)
        echo ".cc"
        ;;
    *.c)
        echo ".c"
        ;;
    *)
        echo "Unsupported file: $1" >&2;
        echo $unsupported_file_extension;
    esac
}

# check_file_type extension
check_file_type ()
{
    local ext=$1;

    if [ -z "$ext" ];
    then
        echo "No valid extension" >&2;
        exit 1;
    fi

    case $ext in
    .c)
        echo "c";
        ;;
    .cpp|.cxx|.cc)
        echo "c++";
        ;;
    *)
        echo "Unknown file extension: $FILE_EXT" >&2;
        echo $unsupported_file_type;
        ;;
    esac
}

cmd=$1
if [ "$cmd" = "version" ]; then
    version;
    exit 0;
fi

if [ "$cmd" = "license" ]; then
    license;
    exit 0;
fi

if [ "$cmd" = "help" ]; then
    subcmd=$2;

    if [ "$subcmd" = "version" ]; then
        help_version;
    elif [ "$subcmd" = "license" ]; then
        help_license;
    elif [ "$subcmd" = "help" ]; then
        help_help;
    elif [ "$subcmd" = "run" ]; then
        help_run;
    elif [ "$subcmd" = "" ]; then
        help_info;
    else
        echo "Unknown subcommand: $2" >&2;
        exit 1;
    fi

    exit 0;
fi

if [ "$cmd" = "run" ];
then
    shift;
fi

CC=$CC;
if [ -z "$CC" ];
then
    CC="gcc";
fi

CXX=$CXX;
if [ -z "$CXX" ];
then
    CXX="g++";
fi

# Set dist file
dest=$OUT_FILE;
if [ -z "$dest" ];
then
    dest="out";
fi

if [ -f "$dest" ] || [ -d "$dest" ];
then
    echo "File or directory ${dest} exists in directory";
    exit 1;
fi

clean ()
{
    rm -f $dest "lib${dest}.a" "lib${dest}.so" -- *.o;
}

# Check whether `gcc` exists on the host.
if ! command -v $CC 2>/dev/null 1>&2;
then
    echo "Please install gcc" >&2;
    exit 1;
fi

# Check whether `g++` exists on the host.
if ! command -v $CXX 2>/dev/null 1>&2;
then
    echo "Please install g++" >&2;
    exit 1;
fi

# Run the program.
IS_CPP=0;
OBJS="";
IS_WRONG=0;
for file in $@;
do
    if [ "$file" = "--" ];
    then
        break;
    fi

    FILE_EXT=$(check_ext "$file")

    if [ "$FILE_EXT" = "$unsupported_file_extension" ];
    then
        IS_WRONG=1;
        continue;
    fi

    filename=$(basename "$file");
    objname="${filename%$FILE_EXT}.o";
    OBJS="$objname $OBJS";

    FILE_TYPE=$(check_file_type "$FILE_EXT");

    if [ "$FILE_TYPE" = "c" ];
    then
        $CC -c -o "$objname" "$file" $CFLAGS;
    elif [ "$FILE_TYPE" = "c++" ];
    then
        IS_CPP=1;
        $CXX -c -o "$objname" "$file" $CXXFLAGS;
    fi
done

if [ $IS_WRONG -ne 0 ];
then
    exit 1;
fi

if [ $IS_CPP -eq 1 ];
then
    LIBS_INTERNAL="-lstdc++";
fi
$CC -o $dest $OBJS $LIBS_INTERNAL $LIBS $CFLAGS $LDFLAGS;

args="";
is_arg=0;
for arg in $@;
do
    if [ "$arg" = "--" ];
    then
        is_arg=1;
        continue;
    fi

    if [ $is_arg -eq 1 ];
    then
       args="$args $arg";
    fi
done

if ! LD_LIBRARY_PATH=$LD_LIBRARY_PATH ./$dest $args;
then
    clean;
    exit 1;
fi

clean;

exit 0;
